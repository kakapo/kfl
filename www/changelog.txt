非跨域名的SSO解决方案:
A. Cookie方案：
1、采用cookie存储用户信息数据
2、用户信息数据加密
3、各子域名应用程序采用统一解密算法
4、需要共享解密方法插件。

好处：机制简单，避免了webserver集群造成的会话数据同步问题。有一定的安全性。
坏处：cookie存取的数据量有限。无法跨域。

B. Session方案：
1、采用服务器储存用户信息数据
2、各子域名共享session id.
3、用户数据无需加密。
4、通过数据库或者memcached缓存并共享会话数据。

好处：安全性高。解决的webserver集群会话数据共享问题。
坏处：无法跨域。稍微复杂，采用数据库有瓶颈问题要解决，采用memcached需要部署memcached服务器。





跨域名的SSO解决方案

思路：

1、用户访问应用服务SP，SP判断用户session id不存在，则调用 sso client通过http get api访问 sso server，需要带上公钥。
（用户想游玩景点，景点先看看此用户是否已经检查过了？没有则去售票处咨询，营业执照传输到售票内部系统。）

2、sso server 从Agent浏览器中获取cookie里的ticket，ticket不存在就转跳到登录界面。存在则将ticket返回给 sso client。
（售票处检测此用户是否有买过票？有的话则直接将票单返回给景点，没有则告诉用户去买票）

3、用户在身份认证中心登录成功后，sso server同时将ticket保存到cookie中。然后转跳回应用服务SP，URL带上ticket。
（用户在售票处掏钱买票，售票处登记，发给用户票单）

4、各应用程序通过SSO client 插件凭ticket，公钥通过http post API通道访问 SSO Server，SSO Server先进行授权判断，然后返回加密的用户token数据。
 （用户来到某景点入口，景点将用户票单，景点营业执照通过内部系统发送到售票处查证，售票处系统检测此景点是否合法的，合法同时票单有效，则返回
 用户的基本信息给景点去做进一步操作）

5、用户信息数据是加密传输，SSO client 插件通过解密算法解密token数据。
  （景点需要安装解密系统）

技术要点:
1、数据传输时采用一定的加密解密算法
2、采用公钥私钥认证机制判断sso client的合法性
3、ticket的有效性判断依据。基于浏览器关闭的。
4、api实现技术，通过http方式。

优点：实现跨域，安全性高
缺点：复杂，需要开发客户端插件。